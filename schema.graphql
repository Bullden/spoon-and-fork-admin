# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LatLng {
  lat: Float!
  lng: Float!
}

type AdditionalUserInfo {
  phoneNumber: String!
  email: String!
}

type User {
  id: ID!
  name: String!
  preferencesId: String!
  latLng: LatLng
  additionalUserInfo: AdditionalUserInfo
}

type Preferences {
  id: ID!
  allowPushNotifications: Boolean!
  allowEmailNotifications: Boolean!
  allowSmsNotifications: Boolean!
}

type Account {
  user: User!
  info: AdditionalUserInfo!
  preferences: Preferences!
}

type Client {
  id: String!
  user: User!
}

type Courier {
  id: String!
  user: User!
}

type Address {
  id: ID!
  placeId: String
  latLng: LatLng!
  description: String!
  entrance: String
  floor: String
  apartment: String
  date: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Ingredient {
  id: ID!
  name: String!
}

type Status {
  id: ID!
  name: String!
  imageId: String!
}

type Dish {
  id: ID!
  name: String!
  description: String!
  imageId: String!
  weight: String!
  kal: String!
  ingredients: [Ingredient!]!
}

type Set {
  id: ID!
  name: String!
  imageId: String!
  cuisineId: String!
  priceCents: Int!
  dishes: [Dish!]!
  statuses: [Status!]!
}

type Cuisine {
  id: ID!
  imageId: String!
  nationality: String!
  count: String!
  rating: String!
}

type Restaurant {
  id: ID!
  userId: String!
  imageId: String!
  address: Address!
  description: String!
  cuisines: [Cuisine!]!
}

type Bag {
  id: ID!
  code: String!
}

type OrderInfo {
  id: String!
  clientAddress: Address!
  distanceMiles: Float
  priceCents: Int!
}

type Cart {
  id: ID!
  userId: String!
}

type Order {
  id: String!
  client: User!
  restaurant: Restaurant
  cart: Cart!
  bag: Bag
  set: Set!
  number: Float!
  orderInfo: OrderInfo!
  created: DateTime!
  placement: OrderPlacement!
  state: OrderState!
  courierId: String
  courier: Courier
  rating: String
}

enum OrderPlacement {
  Client
  Restaurant
}

enum OrderState {
  WaitingForPayment
  ReadyForDelivery
  AcceptedByCourier
  AcceptedByRestaurant
  Delivering
  Delivered
  Completed
}

input IngredientInput {
  id: ID!
  name: String!
}

input StatusInput {
  id: ID!
  name: String!
  imageId: String!
}

input DishInput {
  id: ID!
  name: String!
  description: String!
  imageId: String!
  weight: String!
  kal: String!
  ingredients: [IngredientInput!]!
}

input SetInput {
  id: ID!
  name: String!
  imageId: String!
  cuisineId: String!
  priceCents: Int!
  dishes: [DishInput!]!
  statuses: [StatusInput!]!
}

type Query {
  myAccount: Account!
  restaurants: [Restaurant!]!
  restaurantById(restaurantId: ID!): Restaurant!
  cuisineById(id: String!): Cuisine!
  cuisines: [Cuisine!]!
  cuisinesByRestaurantId(id: String!): [Cuisine!]!
  setById(id: String!): Set!
  setsByCuisineId(id: String!): [Set!]!
  dishById(id: String!): Dish!
  dishesBySetId(id: String!): [Dish!]!
  ingredientById(id: String!): Ingredient!
  ingredientsByDishId(id: String!): [Ingredient!]!
  bagByCode(code: String!): Bag!
  bagByOrderId(id: String!): Bag!
  orders: [Order!]!
  orderById(id: ID!): Order!
  orderState(id: ID!): OrderState!
  ordersForDelivery: [Order!]!
  orderHistory: [Order!]!
  currentOrder: Order
  preferences: Preferences!
  couriers: [Courier!]!
  courierById(courierId: ID!): Courier!
  clients: [Client!]!
  clientById(clientId: ID!): Client!
}

type Mutation {
  createOrder(restaurantId: String!, cartId: String!, setId: String!, clientAddress: CreateAddressRequest!): Order!
  evaluateOrder(rating: Float!, id: String!): Boolean!
  acceptOrder(id: String!): Boolean!
  markOrder(latLng: LatLngInput, action: String!, bagId: String!, orderId: String!): Boolean!
  deleteOrder(orderId: ID!): Boolean!
  removeTheCurrentCourier(orderId: ID!): Boolean!
  updatePreferences(allowSmsNotifications: Boolean, allowEmailNotifications: Boolean, allowPushNotifications: Boolean): Preferences!
  updateClientInformation(phoneNumber: String!, email: String!, name: String!, id: ID!): Boolean!
  createCartAndDistributeOrders(selectedSetsInfo: [SelectedSetInfo!]!, clientAddress: CreateAddressRequest!): Boolean!
  createAddress(location: CreateAddressRequest!): Boolean!
}

input CreateAddressRequest {
  placeId: String
  lat: Float!
  lng: Float!
  description: String!
  entrance: String
  floor: String
  apartment: String
}

input LatLngInput {
  lat: Float!
  lng: Float!
}

input SelectedSetInfo {
  set: SetInput!
  quantity: Float!
}
